<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:f="http://xmlns.jcp.org/jsf/core"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:p="http://xmlns.jcp.org/jsf/passthrough"
                xmlns:qc="http://java.sun.com/jsf/composite/quizconnect"
                template="/WEB-INF/templates/main.xhtml">
    <ui:define name="site-specific-css">
        <link rel="stylesheet" href="../resources/css/profile.css" />
    </ui:define>

    <ui:define name ="content">

        <h:form>
            <h:commandLink action="all?faces-redirect=true" styleClass="back-btn">
                <svg viewBox="0 0 24 24" width="24" height="24"><path class="heroicon-ui" d="M5.41 11H21a1 1 0 0 1 0 2H5.41l5.3 5.3a1 1 0 0 1-1.42 1.4l-7-7a1 1 0 0 1 0-1.4l7-7a1 1 0 0 1 1.42 1.4L5.4 11z"/></svg>All Players
            </h:commandLink>

            <h:panelGroup layout="block" styleClass="container" rendered="#{profileBean.player == null}">
                <h1 class="display-4">No player found</h1>
                <h:commandButton styleClass="btn btn-primary" action="all?faces-redirect=true" value="All Players"/>
            </h:panelGroup>

            <h:panelGroup id="player" layout="block" rendered="#{profileBean.player != null}" styleClass="profile-grid">

                <h:panelGroup layout="block" id="avatar" styleClass="avatar">
                    <qc:playerbox player="#{profileBean.player}" online="#{randomOnlineTestBean.online}" rank="Beginner">
                        <h:commandLink p:class="ml-2" p:data-toggle="modal" p:data-target="#deletePlayer"
                                       rendered="#{profileBean.deletable}">
                            <svg role="img" width="24" height="24" viewBox="0 0 24 24" aria-labelledby="binIconTitle binIconDesc"><title id="binIconTitle">Bin</title><desc id="binIconDesc">Icon of a bin (trash)</desc><path  d="M19 6L5 6M14 5L10 5M6 10L6 20C6 20.6666667 6.33333333 21 7 21 7.66666667 21 11 21 17 21 17.6666667 21 18 20.6666667 18 20 18 19.3333333 18 16 18 10"/></svg>
                            <f:ajax execute="@form" render="@none" />
                        </h:commandLink>
                    </qc:playerbox>
                </h:panelGroup>

                <qc:mainstats player="#{profileBean.player}"/>

                <h:panelGroup layout="block" id="qs-stats" styleClass="qs-stats box">
                    <!-- TODO -->
                    <qc:stat value="#{profileBean.player.totalScore}" label="total score" />
                    <qc:stat value="#{profileBean.player.correctAnswersCount}" label="correct answers" />
                    <qc:stat value="#{profileBean.player.totalAnswers - profileBean.player.correctAnswersCount}" label="wrong answers" />
                    <qc:stat value="#{profileBean.player.lastGameScores[9]}" label="score of last game" />
                </h:panelGroup>

                <h:panelGroup layout="block" id="qs-chart" styleClass="qs-chart box">
                    <div id="line">This player has not played yet.</div>
                    <div id="pie"></div>
                </h:panelGroup>

            </h:panelGroup>

            <h:panelGroup layout="block" styleClass="players px-3">
                <ui:repeat value="#{profileBean.recentlyPlayedWith}" var="player">
                    <qc:playerbox player="#{player}" online="#{randomOnlineTestBean.online}">
                        <h:commandLink action="profile?faces-redirect=true" styleClass="ml-2">
                            <svg viewBox="0 0 24 24" width="24" height="24"><path class="heroicon-ui" d="M12 22a10 10 0 1 1 0-20 10 10 0 0 1 0 20zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16zm0-9a1 1 0 0 1 1 1v4a1 1 0 0 1-2 0v-4a1 1 0 0 1 1-1zm0-4a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/></svg>
                            <f:ajax execute="@this" render="@none"/>
                            <f:setPropertyActionListener value="#{player}" target="#{profileBean.player}"/>
                        </h:commandLink>
                    </qc:playerbox>
                </ui:repeat>
            </h:panelGroup>

            <qc:modal id="deletePlayer"
                      target="deletePlayer"
                      title="Delete Player"
                      confirm="Delete Player"
                      abort="Cancel"
                      confirmAction="#{deletePlayerBean.deletePlayer(profileBean.player)}"
                      update="player">
                Are you sure? This cannot be undone.
            </qc:modal>

        </h:form>

    </ui:define>

    <ui:define name="site-specific-javascript">
        <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
        <script>
            // TODO dont worry this code will change
            // TODO move to external script, fetch data from backend via requestmapping n'stuff
            // TODO get a managers student average  display apex chart annotation? https://apexcharts.com/docs/annotations/
            const line = document.querySelector("#line")
            const pie = document.querySelector("#pie")
          var options = {
            theme: {
              palette: 'palette1',
              mode: 'dark',
              /*
              monochrome: {
                enabled: true,
                color: '#13CFB8',
                // color: 'var(--col-4-m)',
              }
              */
            },
            /*
            colors: [
              'var(--col-2-m)',
              'var(--col-3-m)',
              'var(--col-4-m)',
              'var(--col-5-m)',
            ],
            */
            chart: {
              width: '100%',
              height: 'auto',
              type: 'area'
            },
            series: [{
                name: 'question set 1',
                data: [30,40,35,50,49,60,70,91,125]
              },
              {
                name: 'question set 2',
                data: [60,50,22,18,23,45,56,77,69]
              },
              {
                name: 'question set3',
                data: [88, 120, 95, 80, 95, 76, 40, 50, 45]
              },
              {
                name: 'average',
                data: [60, 70, 60, 55, 45, 40, 35, 40, 50]
              },
            ],
            dataLabels: {
              enabled: false,
            },
            tooltip: {
              enabled: false,
            },
            toolbar: {
              show: false,
              tools: {
                download: false,
              }
            },
            yaxis: {
              show: true,
              labels: {
                show: true,
                style: {
                  color: 'var(--fg)',
                },
                formatter: (value) => value,
              }
            },
            xaxis: {
              categories: [1991,1992,1993,1994,1995,1996,1997, 1998,1999]
            },
            legend: {
              show: true,
              labels: {
                colors: 'var(--fg)',
              }
            }
          }



            var options1 = {
              theme: {
                mode: 'dark',
                palette: 'palette1',
              },
              chart: {
                width: '100%',
                height: 'auto',
                type: 'donut',
              },
              dataLabels: {
                enabled: false,
              },
              tooltip: {
                enabled: false,
              },
              stroke: {
                show: false,
                width: 0,
              },
              series: [44, 55, 41, 17, 15],
              responsive: [{
                breakpoint: 480,
                options: {
                  chart: {
                    width: 200
                  },
                  legend: {
                    position: 'bottom'
                  }
                }
              }],
              plotOptions: {
                pie: {
                  expandOnClick: false
                }
              }
            }

            const URL = `/players/stats`;
            fetch(URL, {
              method: 'POST',
            })
              .then(response => {
                if(!response.ok){
                  throw Error(response.statusText || response.status.toString());
                }
                return response;
              })
              .then(response => response.json())
              .then(({ playedSets, setPlayCounts, lastGameScores }) => {
                console.debug(playedSets, setPlayCounts, lastGameScores);

                if(lastGameScores.reduce((acc, val) => acc + val, 0) === 0) return;

                options.series = [{
                  name: 'Scores of last games',
                  data: lastGameScores}];

                let chart = new ApexCharts(line, options);

                line.innerHTML = '';
                chart.render();

                if(playedSets.length !== setPlayCounts.length || playedSets.length === 0) return;

                // TODO handle null values
                options1.labels = playedSets;
                options1.series = setPlayCounts;

                var chart1 = new ApexCharts(
                  pie,
                  options1
                );
                pie.innerHTML = '';
                chart1.render();
              });

        </script>
    </ui:define>
</ui:composition>
